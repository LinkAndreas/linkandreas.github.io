{"pageProps":{"article":{"id":"13_11_2022","date":"13th of November 2022","markdown":"# Story Numbers in Commit Messages: Leveraging the power of Git Hooks\n\nEspecially in large software projects with many developers involved, it is best practice to include the story number from the ticket system like Jira or Azure DevOps in every commit. This will let you refer to the original requirements quickly and see how the team thought about the feature, bug fix or release when it was developed. Still, manually adding the number to every commit is cumbersome. Hence, today, we will learn how to automatically derive the story number from the branch name and automate that procedure using Git Commit Hooks.\n\n![Branch History](article_13_11_2022_branch_history.png)\n\n## Story Number Extraction\n\nWe assume that branches are named according to the Git Flow naming conventions, i.e., production code is contained in the `master` while pre-production code is found in the `develop` branch. The latter is the starting point for features, bug-fixes and releases, while hotfixes are made from the `master` branch.\n\nBranches other than the `master` and `develop` also contain the story number in their name, represented as `SN-XXXXXX`, where `XXXXXX` are digits. The prefix `SN` as well as the number of digits may vary depending on the naming conventions used in your project. As a result, branch names match the following pattern:\n\n- /**\\<type\\>**/**SN-XXXXXX**-\\<description\\>, where `X in [0-9]` and `<type> in {feature, release, bugfix, hotfix}`\n\nSubsequently, examples for each branch type are given:\n- /**feature**/**SN-362845**-Add-dynamic-island-support\n- /**release**/**SN-284321**-Release-v3.0.0\n- /**bugfix**/**SN-839453**-Fix-memory-leak-in-home-tab\n- /**hotfix**/**SN-839453**-Fix-app-crash-in-onboarding\n\nThe idea is to automatically derive the story number from the branch name and include it in every commit. To achieve this, we leverage the power of git commit hooks to modify the message before the commit is made. As a result, adding the number becomes much simpler, since it does not need to be remembered among consecutive commits. Instead, developers only have to specify the story number once when the branch is created.\n\n## Shell Script: Prepare Commit Message Hook\n\nBelow, you can find the script that is executed as soon as a commit is made:\n\n```sh\n#!/bin/bash\n\ndetermine_branch_name() {\n  git rev-parse --abbrev-ref HEAD\n}\n\ndetermine_story_number() {\n  content=$1\n  \n  echo \"$content\" |\\\n    grep -Eo '^(\\w+/)*(\\w+[-_])?[0-9]+' |\\\n    grep -Eo '(\\w+[-])+[0-9]+' |\\\n    tr \"[:lower:]\" \"[:upper:]\"\n}\n\ncontained_in_list() {\n  list=$1\n  delimiter=$2\n  item=$3\n  [[ \"$list\" =~ ($delimiter|^)$item($delimiter|$) ]]\n}\n\nCOMMIT_EDITMSG_FILE=$1\nCOMMIT_MESSAGE=$(cat \"$COMMIT_EDITMSG_FILE\")\nBRANCH_NAME=$(determine_branch_name)\nSTORY_NUMBER=$(determine_story_number \"$BRANCH_NAME\")\nEXCLUDED_BRANCES=\"master, develop\"\n\nif [ -n \"$BRANCH_NAME\" ] &&  ! contained_in_list \"$EXCLUDED_BRANCES\" \", \" \"$BRANCH_NAME\"; then\n  if [ \"$STORY_NUMBER\" = \"\" ] || [[ \"$COMMIT_MESSAGE\" == \"[$STORY_NUMBER]\"* ]]; then\n    exit 0\n  else\n    echo \"[$STORY_NUMBER] $COMMIT_MESSAGE\" > \"$COMMIT_EDITMSG_FILE\"\n  fi\nfi\n``` \n\nFirst, we request a non-ambiguous abbreviation for the object referenced by HEAD:\n   \n```sh\ndetermine_branch_name() {\n  git rev-parse --abbrev-ref HEAD\n}\n```\n\nGiven the branch name, `determine_story_number` chains multiple extended regular expressions to identify the story number in case it exists. In addition, all lowercased letters are replaced by upper case letters:\n\n```sh\ndetermine_story_number() {\n  content=$1\n  \n  echo \"$content\" |\\\n    grep -Eo '^(\\w+/)*(\\w+[-_])?[0-9]+' |\\\n    grep -Eo '(\\w+[-])+[0-9]+' |\\\n    tr \"[:lower:]\" \"[:upper:]\"\n}\n```\n\n> Note: paths with an arbitrary step count are allowed:\n>    - /feature/SN-374324-Implement-Dark-Mode\n>    - /feature/navigation/SN-725342-Handle-In-App-Deeplink\n\nTo ensure that commits on the `master` or `develop` branch are not affected, we exit early in case that the branch is mentioned in the list of excluded branches. Likewise, we also ensure that the original commit message does not contain the story number yet. When all previous conditions are met, the original commit message is prefixed with the story number by modifying the content of the `COMMIT_EDITMSG_FILE`:\n\n```sh\nif [ -n \"$BRANCH_NAME\" ] &&  ! contained_in_list \"$EXCLUDED_BRANCES\" \", \" \"$BRANCH_NAME\"; then\n  if [ \"$STORY_NUMBER\" = \"\" ] || [[ \"$COMMIT_MESSAGE\" == \"[$STORY_NUMBER]\"* ]]; then\n    exit 0\n  else\n    echo \"[$STORY_NUMBER] $COMMIT_MESSAGE\" > \"$COMMIT_EDITMSG_FILE\"\n  fi\nfi\n```\n\n## Using the Prepare Commit Message Hook in your Projects\n\nThe following steps are necessary to activate the hook in your project:\n\n1. Navigate to the *hooks*' directory:\n\n   ```sh\n   cd /<git-repository>/.git/hooks\n   ```\n\n2. Create a file called `prepare-commit-msg`:\n\n   ```sh\n   touch prepare-commit-msg\n   ```\n\n   > Note: You can also remove the suffix `.sample` from `prepare-commit-msg.sample` in case it exists.\n\n3. Copy the script as the `prepare-commit-msg` hook's content:\n\n   ```sh\n   cat <script content> > prepare-commit-msg\n   ```\n\n4. Make the hook executable by updating its permissions:\n\n   ```sh\n   chmod a+x prepare-commit-msg\n   ```\n\nThat's it! As soon as the hook is active, the story number is read from the branch name and automatically included in every commit. \n\n# References:\n\n- [Git Commit Messages - Best Practices](https://initialcommit.com/blog/git-commit-messages-best-practices) - Matthew Forsyth\n- [Branch Naming Conventions](https://deepsource.io/blog/git-branch-naming-conventions/) - Sanket\n\nHappy Coding ðŸš€","title":"Story Numbers in Commit Messages: Leveraging the power of Git Hooks","description":"Especially in large software projects with many developers involved,\n            it is best practice to include the story number from the ticket system\n            like Jira or Azure DevOps in every commit. This will let you refer to\n            the original requirements quickly and see how the team thought about the\n            feature, bug fix or release when it was developed. Still, manually adding\n            the number to every commit is cumbersome. Hence, today, we will learn how\n            to automatically derive the story number from the branch name and automate\n            that procedure using Git Commit Hooks."}},"__N_SSG":true}